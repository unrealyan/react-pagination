/**
 * Created by unrealyan on 16/8/11.
 */
import React, {Component, PropTypes} from "react";
class Pagination extends Component {
    constructor(props) {
        super(props);
        this.state = {
            currentPage: 0,
            setPageSize: 5,
            pageSize: 5,
            initialNo: 0,
            pageCount: this.props.pageCount ? parseInt(this.props.pageCount % 5) == 0 ? parseInt(this.props.pageCount / 5) : parseInt(this.props.pageCount / 5) + 1 : 0
        }
    }


    componentWillReceiveProps(nextProps) {
        if (nextProps.pageCount) {
            this.setState({
                pageCount: parseInt(nextProps.pageCount % this.state.pageSize) == 0 ?
                    parseInt(nextProps.pageCount / this.state.pageSize) : parseInt(nextProps.pageCount / this.state.pageSize) + 1
            })
        }


    }

    onClick(e) {
        const {queryFunc}=this.props;
        let currentPage = parseInt(e.target.name);
        this.setState({currentPage: currentPage + 1}, function () {
            queryFunc(this.state.pageSize, this.state.currentPage);
            this.refs.jumpPage.value = this.state.currentPage;
        });

    }

    upPage() {
        const {queryFunc}=this.props;
        if (this.state.currentPage > 1) {
            let nextPage = this.state.currentPage - 1;
            this.setState({currentPage: nextPage}, function () {
                queryFunc(this.state.pageSize, this.state.currentPage);
                this.refs.jumpPage.value = this.state.currentPage;
            });
        }
    }

    nextPage() {
        const {queryFunc}=this.props;
        if (this.state.currentPage < this.state.pageCount) {
            let nextPage = this.state.currentPage + 1;
            this.setState({currentPage: nextPage}, function () {
                queryFunc(this.state.pageSize, this.state.currentPage);
                this.refs.jumpPage.value = this.state.currentPage;
            });
        }
    }

    onChange() {
        this.setState({
            currentPage: this.state.currentPage
        });
    }

    setPageSize(e) {
        const {queryFunc}=this.props;
        this.setState({
            currentPage: 1,
            pageSize: parseInt(e.target.value)
        }, function () {
            queryFunc(this.state.pageSize, this.state.currentPage);
            this.refs.jumpPage.value = this.state.currentPage;
        });
    }

    jump() {
        const {queryFunc}=this.props;
        this.setState({
            currentPage: parseInt(this.refs.jumpPage.value)
        }, function () {
            queryFunc(this.state.pageSize, this.state.currentPage);
            this.refs.jumpPage.value = this.state.currentPage;
        });

    }

    render() {
        let items = [];

        for (let i = 0; i < this.state.pageCount; i++) {
            items.push(i)
        }

        return (
            <nav>
                <ul className="pagination">
                    <li className={this.state.currentPage<=1?"disabled":""} style={{cursor: 'pointer '}}>
                        <a onClick={this.upPage.bind(this)} aria-label="Previous"><span
                            aria-hidden="true">上一页</span></a></li>
                    {items.map((value, key)=> {
                        if ((key + 1) < 5) {
                            return (
                                <li key={key} className={this.state.currentPage==(key+1)?"active":""}
                                    style={{cursor: 'pointer '}}>
                                    <a name={value} onClick={this.onClick.bind(this)}>{value + 1} <span
                                        className="sr-only">(current)</span>
                                    </a>
                                </li>
                            )
                        } else if ((key + 1) > 5 && (key + 1) < (this.state.pageCount - 1)) {
                            return (
                                ""
                            )
                        } else if ((key + 1) == (this.state.pageCount - 1)) {
                            return (
                                <li key={key} className="disabled" style={{cursor: 'default'}}>
                                    <a name={value} onClick={this.onClick.bind(this)}>...<span className="sr-only">(current)</span>
                                    </a>
                                </li>
                            )
                        } else if ((key + 1) == this.state.pageCount) {
                            return (
                                <li key={key} className={this.state.currentPage==(key+1)?"active":""}
                                    style={{cursor: 'pointer '}}>
                                    <a name={value} onClick={this.onClick.bind(this)}>{this.state.pageCount}<span
                                        className="sr-only">(current)</span>
                                    </a>
                                </li>
                            )
                        }

                    })}
                    <li style={{cursor: 'default'}}>
                        <a>跳转至
                            <input ref="jumpPage"
                                   onKeyUp={(e)=>{e.target.value=e.target.value.replace(/[^\d]/g,'')>this.state.pageCount?this.state.pageCount:e.target.value.replace(/[^\d]/g,'')}}
                                   onChange={this.onChange.bind(this)} type="text"
                                   style={{height:"auto",fontSize:"12px",padding:"auto",lineHeight:"12px",width:"35px"}}/>页
                        </a>
                        <span onClick={this.jump.bind(this)} style={{cursor: 'pointer '}}>跳转</span>
                    </li>
                    <li style={{cursor: 'default'}}>
                        <a>每页显示
                            <select style={{height:"auto",fontSize:"12px",padding:"auto"}}
                                    onChange={this.setPageSize.bind(this)}>
                                <option value="5">5</option>
                                <option value="10">10</option>
                                <option value="50">50</option>
                            </select>条
                        </a>
                    </li>
                    <li className={this.state.currentPage>=this.state.pageCount?"disabled":""}
                        style={{cursor: 'pointer '}}>
                        <a onClick={this.nextPage.bind(this)} aria-label="Previous"><span aria-hidden="true">下一页</span></a>
                    </li>
                </ul>
            </nav>
        )
    }
}
Pagination.propTypes = {
    pageSize: PropTypes.number,
    pageCount: PropTypes.number,
    queryFunc: PropTypes.func.isRequired,
    currentPage: PropTypes.number
};


export default Pagination;
